/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Vistas;

import Clases.BMPtoJPEGHandler;
import Clases.Imagen;
import Clases.JPEGHandler;
import Clases.JPEGImageCopy;
import Clases.JPEGImageHandlerBN;
import Clases.JPEGImageHandlerColors;
import Clases.JPEGImageHandlerRotator;
import Clases.JPEGtoBMPHandler;
import java.awt.Desktop;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Fernando
 */
public class Editor extends javax.swing.JFrame {

    Principal principal;
    Imagen imagenActual;
    String direccion = System.getProperty("user.home") + "\\Desktop\\Temporal\\";
    int cantidad;

    public Editor(Principal principal) {
        initComponents();
        setLocationRelativeTo(null);

        this.principal = principal;
        principal.setVisible(false);

        this.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent ant) {
                principal.setVisible(true);
            }
        });

        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoBotones = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        lblOriginal = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        lblResultado = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnBlancoYNegro = new javax.swing.JRadioButton();
        btnJpgABmp = new javax.swing.JRadioButton();
        btnBmpAJpg = new javax.swing.JRadioButton();
        btnRGB = new javax.swing.JRadioButton();
        btnModificar = new javax.swing.JRadioButton();
        btnCargarImagen = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        btnEjecutar = new javax.swing.JButton();
        btnAbrirCarpeta = new javax.swing.JButton();
        btnCopiaJPG = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(30, 30, 30));
        jPanel1.setLayout(null);

        jPanel2.setBackground(new java.awt.Color(60, 60, 60));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblOriginal, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblOriginal, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel2);
        jPanel2.setBounds(20, 110, 290, 260);

        jPanel3.setBackground(new java.awt.Color(60, 60, 60));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblResultado, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblResultado, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel3);
        jPanel3.setBounds(460, 110, 290, 260);

        jLabel2.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Resultado");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel1.add(jLabel2);
        jLabel2.setBounds(580, 80, 80, 30);

        btnBlancoYNegro.setBackground(new java.awt.Color(30, 30, 30));
        grupoBotones.add(btnBlancoYNegro);
        btnBlancoYNegro.setFont(new java.awt.Font("Roboto", 0, 11)); // NOI18N
        btnBlancoYNegro.setForeground(new java.awt.Color(255, 255, 255));
        btnBlancoYNegro.setText("Blanco y negro");
        jPanel1.add(btnBlancoYNegro);
        btnBlancoYNegro.setBounds(340, 280, 100, 30);

        btnJpgABmp.setBackground(new java.awt.Color(30, 30, 30));
        grupoBotones.add(btnJpgABmp);
        btnJpgABmp.setFont(new java.awt.Font("Roboto", 0, 11)); // NOI18N
        btnJpgABmp.setForeground(new java.awt.Color(255, 255, 255));
        btnJpgABmp.setSelected(true);
        btnJpgABmp.setText("JPEG a BMP");
        jPanel1.add(btnJpgABmp);
        btnJpgABmp.setBounds(340, 130, 90, 30);

        btnBmpAJpg.setBackground(new java.awt.Color(30, 30, 30));
        grupoBotones.add(btnBmpAJpg);
        btnBmpAJpg.setFont(new java.awt.Font("Roboto", 0, 11)); // NOI18N
        btnBmpAJpg.setForeground(new java.awt.Color(255, 255, 255));
        btnBmpAJpg.setText("BMP a JPEG ");
        jPanel1.add(btnBmpAJpg);
        btnBmpAJpg.setBounds(340, 160, 90, 30);

        btnRGB.setBackground(new java.awt.Color(30, 30, 30));
        grupoBotones.add(btnRGB);
        btnRGB.setFont(new java.awt.Font("Roboto", 0, 11)); // NOI18N
        btnRGB.setForeground(new java.awt.Color(255, 255, 255));
        btnRGB.setText("RGB y sepia");
        jPanel1.add(btnRGB);
        btnRGB.setBounds(340, 220, 90, 30);

        btnModificar.setBackground(new java.awt.Color(30, 30, 30));
        grupoBotones.add(btnModificar);
        btnModificar.setFont(new java.awt.Font("Roboto", 0, 11)); // NOI18N
        btnModificar.setForeground(new java.awt.Color(255, 255, 255));
        btnModificar.setText("Modificar");
        jPanel1.add(btnModificar);
        btnModificar.setBounds(340, 250, 90, 30);

        btnCargarImagen.setBackground(new java.awt.Color(0, 128, 255));
        btnCargarImagen.setFont(new java.awt.Font("Roboto Bk", 0, 12)); // NOI18N
        btnCargarImagen.setForeground(new java.awt.Color(255, 255, 255));
        btnCargarImagen.setText("Cargar Imagen");
        btnCargarImagen.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCargarImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarImagenActionPerformed(evt);
            }
        });
        jPanel1.add(btnCargarImagen);
        btnCargarImagen.setBounds(100, 40, 130, 30);

        jLabel4.setFont(new java.awt.Font("Roboto Bk", 1, 34)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Editor");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(300, 20, 160, 50);

        jLabel3.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Opciones");
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel1.add(jLabel3);
        jLabel3.setBounds(360, 100, 60, 20);

        jLabel5.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Original");
        jLabel5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel1.add(jLabel5);
        jLabel5.setBounds(140, 80, 60, 30);

        btnEjecutar.setBackground(new java.awt.Color(0, 128, 255));
        btnEjecutar.setFont(new java.awt.Font("Roboto Bk", 0, 12)); // NOI18N
        btnEjecutar.setForeground(new java.awt.Color(255, 255, 255));
        btnEjecutar.setText("Ejecutar");
        btnEjecutar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnEjecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEjecutarActionPerformed(evt);
            }
        });
        jPanel1.add(btnEjecutar);
        btnEjecutar.setBounds(340, 330, 100, 30);

        btnAbrirCarpeta.setBackground(new java.awt.Color(0, 128, 255));
        btnAbrirCarpeta.setFont(new java.awt.Font("Roboto Bk", 0, 12)); // NOI18N
        btnAbrirCarpeta.setForeground(new java.awt.Color(255, 255, 255));
        btnAbrirCarpeta.setText("Ahrir carpeta con resultados");
        btnAbrirCarpeta.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAbrirCarpeta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrirCarpetaActionPerformed(evt);
            }
        });
        jPanel1.add(btnAbrirCarpeta);
        btnAbrirCarpeta.setBounds(530, 380, 190, 30);

        btnCopiaJPG.setBackground(new java.awt.Color(30, 30, 30));
        grupoBotones.add(btnCopiaJPG);
        btnCopiaJPG.setFont(new java.awt.Font("Roboto", 0, 11)); // NOI18N
        btnCopiaJPG.setForeground(new java.awt.Color(255, 255, 255));
        btnCopiaJPG.setText("Copia JPG");
        jPanel1.add(btnCopiaJPG);
        btnCopiaJPG.setBounds(340, 190, 90, 30);

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 780, 430));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCargarImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarImagenActionPerformed

        String ruta = null;
        String nombre = null;
        BufferedImage imagenBuff = null;
        JFileChooser seleccionarFoto = new JFileChooser();
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("JPG, JPEG, BMP", "jpg", "jpeg", "bmp");
        seleccionarFoto.setFileFilter(filtro);
        int seleccion = seleccionarFoto.showOpenDialog(this);

        if (seleccion == seleccionarFoto.APPROVE_OPTION) {
            lblResultado.setIcon(null);
            ruta = seleccionarFoto.getSelectedFile().getPath();
            nombre = seleccionarFoto.getSelectedFile().getName();
            try {
                imagenBuff = ImageIO.read(seleccionarFoto.getSelectedFile());
            } catch (IOException ex) {
                Logger.getLogger(Biblioteca.class.getName()).log(Level.SEVERE, null, ex);
            }

            Imagen imagen = new Imagen(imagenBuff, nombre, ruta);
            this.imagenActual = imagen;
            colocarFoto(lblOriginal,this.imagenActual.getImagen());
        }

    }//GEN-LAST:event_btnCargarImagenActionPerformed

    private void btnEjecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEjecutarActionPerformed
        if(this.imagenActual != null){
        if(btnJpgABmp.isSelected()){
            
            

            JPEGtoBMPHandler handler = new JPEGtoBMPHandler(true, this.imagenActual.getNombre(), this.imagenActual.getDireccion());
            try {
                JPEGHandler.runHandler(handler);
            } catch (Exception ex) {
                Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                System.out.println(direccion + handler.obtenerNombre());
                BufferedImage imagenResultado = ImageIO.read(new File(direccion + handler.obtenerNombre()));
                colocarFoto(lblResultado, imagenResultado);
                
            } catch (IOException ex) {
                Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
        }else if(btnBmpAJpg.isSelected()){
            
 
            BMPtoJPEGHandler handler = new BMPtoJPEGHandler(true, this.imagenActual.getNombre(), this.imagenActual.getDireccion());
            try {
                JPEGHandler.runHandler(handler);
            } catch (Exception ex) {
                Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                System.out.println(direccion + handler.obtenerNombre());
                BufferedImage imagenResultado = ImageIO.read(new File(direccion + handler.obtenerNombre()));
                colocarFoto(lblResultado, imagenResultado);
                
            } catch (IOException ex) {
                Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        }else if(btnCopiaJPG.isSelected()){
            

            JPEGImageCopy handler = new JPEGImageCopy( this.imagenActual.getNombre(), this.imagenActual.getDireccion());
            try {
                JPEGHandler.runHandler(handler);
            } catch (Exception ex) {
                Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                System.out.println(direccion + handler.obtenerNombre());
                BufferedImage imagenResultado = ImageIO.read(new File(direccion + handler.obtenerNombre()));
                colocarFoto(lblResultado, imagenResultado);
                
            } catch (IOException ex) {
                Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
        }else if(btnRGB.isSelected()){

            JPEGtoBMPHandler handler = new JPEGtoBMPHandler( false,this.imagenActual.getNombre(), this.imagenActual.getDireccion());
            System.out.println(direccion+handler.obtenerNombre());
            try {
                JPEGHandler.runHandler(handler);
            } catch (Exception ex) {
                Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            JPEGImageHandlerColors colores = new JPEGImageHandlerColors(handler.obtenerNombre(), direccion+handler.obtenerNombre());
            
            try {
                JPEGHandler.runHandler(colores);
            } catch (Exception ex) {
                Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            try {
                
                BufferedImage imagenResultado = ImageIO.read(new File(direccion + colores.obtenerNombre().replace("bmp", "jpg")));
                colocarFoto(lblResultado, imagenResultado);
                
            } catch (IOException ex) {
                Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
            }
            handler.eliminarImagen();
            
            
        }else if(btnModificar.isSelected()){
        
            JPEGtoBMPHandler handler = new JPEGtoBMPHandler( false,this.imagenActual.getNombre(), this.imagenActual.getDireccion());
            System.out.println(direccion+handler.obtenerNombre());
            try {
                JPEGHandler.runHandler(handler);
            } catch (Exception ex) {
                Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            JPEGImageHandlerRotator rotar = new JPEGImageHandlerRotator(handler.obtenerNombre(), direccion+handler.obtenerNombre());
            
            try {
                JPEGHandler.runHandler(rotar);
            } catch (Exception ex) {
                Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            try {
                
                BufferedImage imagenResultado = ImageIO.read(new File(direccion + rotar.obtenerNombre()));
                colocarFoto(lblResultado, imagenResultado);
                
            } catch (IOException ex) {
                Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
            }
            handler.eliminarImagen();
            
        }else if(btnBlancoYNegro.isSelected()){
        
            
            JPEGtoBMPHandler handler = new JPEGtoBMPHandler( false,this.imagenActual.getNombre(), this.imagenActual.getDireccion());
            System.out.println(direccion+handler.obtenerNombre());
            try {
                JPEGHandler.runHandler(handler);
            } catch (Exception ex) {
                Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            JPEGImageHandlerBN bn = new JPEGImageHandlerBN(handler.obtenerNombre(), direccion+handler.obtenerNombre());
            
            try {
                JPEGHandler.runHandler(bn);
            } catch (Exception ex) {
                Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            try {
                
                BufferedImage imagenResultado = ImageIO.read(new File(direccion + bn.obtenerNombre()));
                colocarFoto(lblResultado, imagenResultado);
                
            } catch (IOException ex) {
                Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
            }
            handler.eliminarImagen();
            
        }
        
        }else{
            JOptionPane.showMessageDialog(null, "Antes de realizar cualquier acción debe seleccionar una imagen");
        }
    }//GEN-LAST:event_btnEjecutarActionPerformed

    private void btnAbrirCarpetaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbrirCarpetaActionPerformed
        try {
            // Obtenemos el directorio de la carpeta temporal en el escritorio
            String path = System.getProperty("user.home") + "/Desktop/Temporal";

            // Creamos un objeto File con la ruta de la carpeta
            File folder = new File(path);

            // Abrimos la carpeta en el explorador de Windows
            Desktop.getDesktop().open(folder);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnAbrirCarpetaActionPerformed

    
    public void colocarFoto(JLabel label, BufferedImage imagen) {
        ImageIcon icono = new ImageIcon(imagen.getScaledInstance(label.getWidth(), label.getHeight(), Image.SCALE_SMOOTH));
        label.setIcon(icono);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAbrirCarpeta;
    private javax.swing.JRadioButton btnBlancoYNegro;
    private javax.swing.JRadioButton btnBmpAJpg;
    private javax.swing.JButton btnCargarImagen;
    private javax.swing.JRadioButton btnCopiaJPG;
    private javax.swing.JButton btnEjecutar;
    private javax.swing.JRadioButton btnJpgABmp;
    private javax.swing.JRadioButton btnModificar;
    private javax.swing.JRadioButton btnRGB;
    private javax.swing.ButtonGroup grupoBotones;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel lblOriginal;
    private javax.swing.JLabel lblResultado;
    // End of variables declaration//GEN-END:variables
}
